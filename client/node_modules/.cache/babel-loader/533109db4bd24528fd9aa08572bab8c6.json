{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Xavier\\\\Documents\\\\School\\\\Fall 2019\\\\Distributed Web Systems Design\\\\OurSongs\\\\client\\\\src\\\\components\\\\comments\\\\newComment.jsx\";\nimport React, { Component } from \"react\";\nimport Track from \"../posts/track\";\nimport \"./newComment.scss\";\n\nclass NewComment extends Component {\n  constructor() {\n    super();\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n\n      if (this.state.commentToPost === \"\" && this.state.commentDescription === \"\") {\n        this.setState({\n          badCommentSongMessage: \"Please select a song\",\n          badCommentDescriptionMessage: \"Comments must have a description\"\n        });\n      } else if (this.state.commentToPost === \"\") {\n        this.setState({\n          badCommentSongMessage: \"Please select a song\"\n        });\n      } else if (this.state.commentDescription === \"\") {\n        this.setState({\n          badCommentDescriptionMessage: \"Comments must have a description\"\n        });\n      } else {\n        fetch(\"/api/comments\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            PostID: this.props.PostID,\n            CommentDescription: this.state.commentDescription,\n            //using commentToPostID in case user edits id after clicking on track\n            CommentSong: this.state.commentToPostID,\n            CommentDate: new Date().toISOString().slice(0, 19).replace(\"T\", \" \"),\n            UserName: this.props.currentUserName\n          })\n        }).then(() => {// if (this.props.Playlist) {\n          //   fetch(\n          //     `https://api.spotify.com/v1/playlists/${this.props.Playlist}/tracks`,\n          //     {\n          //       method: \"POST\",\n          //       headers: {\n          //         Authorization: `Bearer ${this.props.token}`,\n          //         \"Content-Type\": \"application/json\"\n          //       },\n          //       body: JSON.stringify({\n          //         uris: [`spotify:track:${this.state.commentToPostID}`]\n          //       })\n          //     }\n          //   );\n          // }\n        }).then(() => {\n          this.props.refresh();\n          this.setState({\n            results: [],\n            commentSong: \"\",\n            commentDescription: \"\",\n            isMakingNew: false,\n            commentToPost: \"\",\n            badCommentSongMessage: \"\",\n            badCommentDescriptionMessage: \"\"\n          });\n        }).catch(err => {\n          console.log(err);\n        });\n      }\n    };\n\n    this.handleOnChange = e => {\n      this.setState({\n        commentSong: e.target.value,\n        badCommentSongMessage: \"\"\n      });\n      fetch(\"https://api.spotify.com/v1/search?q=\".concat(e.target.value, \"&type=track&market=US&limit=6\"), {\n        headers: {\n          Authorization: \"Bearer \".concat(this.props.token)\n        }\n      }).then(res => res.json()).then(result => {\n        if (result.tracks) {\n          this.setState({\n            results: result.tracks.items\n          });\n        }\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          results: []\n        });\n      });\n    };\n\n    this.handleTrackClick = id => {\n      const isTrack = element => element.id === id;\n\n      const selectedTrackIndex = this.state.results.findIndex(isTrack);\n      const selectedTrack = this.state.results[selectedTrackIndex];\n      this.setState({\n        results: [],\n        commentSong: id,\n        commentToPost: \"\".concat(selectedTrack.name, \" by \").concat(selectedTrack.artists[0].name),\n        commentToPostID: id,\n        badCommentSongMessage: \"\"\n      });\n    };\n\n    this.handleCreateNewComment = () => {\n      this.setState({\n        isMakingNew: true\n      });\n    };\n\n    this.handleCancel = () => {\n      this.setState({\n        results: [],\n        commentSong: \"\",\n        commentDescription: \"\",\n        isMakingNew: false,\n        commentToPost: \"\",\n        commentToPostID: \"\",\n        badCommentSongMessage: \"\",\n        badCommentDescriptionMessage: \"\"\n      });\n    };\n\n    this.state = {\n      results: [],\n      commentSong: \"\",\n      commentDescription: \"\",\n      isMakingNew: false,\n      commentToPost: \"\",\n      commentToPostID: \"\",\n      badCommentSongMessage: \"\",\n      badCommentDescriptionMessage: \"\"\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, this.state.isMakingNew ? React.createElement(\"form\", {\n      className: \"new-comment-form\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"form-text text-muted\",\n      htmlFor: \"CommentSong\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Enter Spotify Track ID\", \" \", this.state.commentToPost && React.createElement(\"span\", {\n      htmlFor: \"CommentSong\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"(\", this.state.commentToPost, \")\")), React.createElement(\"input\", {\n      onChange: this.handleOnChange,\n      value: this.state.commentSong,\n      className: this.state.badCommentSongMessage ? \"form-control is-invalid\" : \"form-control\",\n      type: \"text\",\n      name: \"CommentSong\",\n      id: \"CommentSong\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, this.state.badCommentSongMessage)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, this.state.results.map(track => React.createElement(Track, {\n      key: track.id,\n      trackClick: this.handleTrackClick,\n      trackAlbumArtUrl: track.album.images[2].url,\n      trackTitle: track.name,\n      trackArtist: track.artists[0].name,\n      trackAlbum: track.album.name,\n      id: track.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"form-text text-muted\",\n      htmlFor: \"CommentDescription\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Enter Description\"), React.createElement(\"input\", {\n      onChange: e => this.setState({\n        commentDescription: e.target.value,\n        badCommentDescriptionMessage: \"\"\n      }),\n      value: this.state.commentDescription,\n      className: this.state.badCommentDescriptionMessage ? \"form-control is-invalid\" : \"form-control\",\n      type: \"text\",\n      name: \"CommentDescription\",\n      id: \"CommentDescription\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, this.state.badCommentDescriptionMessage)), React.createElement(\"div\", {\n      className: \"commentOrCancel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: this.handleCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(\"input\", {\n      className: \"btn btn-primary\",\n      type: \"submit\",\n      value: \"Comment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }))) : React.createElement(\"button\", {\n      onClick: this.handleCreateNewComment,\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"Make A Comment\"));\n  }\n\n}\n\nexport default NewComment;","map":{"version":3,"sources":["C:/Users/Xavier/Documents/School/Fall 2019/Distributed Web Systems Design/OurSongs/client/src/components/comments/newComment.jsx"],"names":["React","Component","Track","NewComment","constructor","handleSubmit","e","preventDefault","state","commentToPost","commentDescription","setState","badCommentSongMessage","badCommentDescriptionMessage","fetch","method","headers","body","JSON","stringify","PostID","props","CommentDescription","CommentSong","commentToPostID","CommentDate","Date","toISOString","slice","replace","UserName","currentUserName","then","refresh","results","commentSong","isMakingNew","catch","err","console","log","handleOnChange","target","value","Authorization","token","res","json","result","tracks","items","handleTrackClick","id","isTrack","element","selectedTrackIndex","findIndex","selectedTrack","name","artists","handleCreateNewComment","handleCancel","render","map","track","album","images","url"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Track from \"../posts/track\";\r\nimport \"./newComment.scss\";\r\n\r\nclass NewComment extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      results: [],\r\n      commentSong: \"\",\r\n      commentDescription: \"\",\r\n      isMakingNew: false,\r\n      commentToPost: \"\",\r\n      commentToPostID: \"\",\r\n      badCommentSongMessage: \"\",\r\n      badCommentDescriptionMessage: \"\"\r\n    };\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (\r\n      this.state.commentToPost === \"\" &&\r\n      this.state.commentDescription === \"\"\r\n    ) {\r\n      this.setState({\r\n        badCommentSongMessage: \"Please select a song\",\r\n        badCommentDescriptionMessage: \"Comments must have a description\"\r\n      });\r\n    } else if (this.state.commentToPost === \"\") {\r\n      this.setState({\r\n        badCommentSongMessage: \"Please select a song\"\r\n      });\r\n    } else if (this.state.commentDescription === \"\") {\r\n      this.setState({\r\n        badCommentDescriptionMessage: \"Comments must have a description\"\r\n      });\r\n    } else {\r\n      fetch(\"/api/comments\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          PostID: this.props.PostID,\r\n          CommentDescription: this.state.commentDescription,\r\n          //using commentToPostID in case user edits id after clicking on track\r\n          CommentSong: this.state.commentToPostID,\r\n          CommentDate: new Date()\r\n            .toISOString()\r\n            .slice(0, 19)\r\n            .replace(\"T\", \" \"),\r\n          UserName: this.props.currentUserName\r\n        })\r\n      })\r\n        .then(() => {\r\n          // if (this.props.Playlist) {\r\n          //   fetch(\r\n          //     `https://api.spotify.com/v1/playlists/${this.props.Playlist}/tracks`,\r\n          //     {\r\n          //       method: \"POST\",\r\n          //       headers: {\r\n          //         Authorization: `Bearer ${this.props.token}`,\r\n          //         \"Content-Type\": \"application/json\"\r\n          //       },\r\n          //       body: JSON.stringify({\r\n          //         uris: [`spotify:track:${this.state.commentToPostID}`]\r\n          //       })\r\n          //     }\r\n          //   );\r\n          // }\r\n        })\r\n        .then(() => {\r\n          this.props.refresh();\r\n          this.setState({\r\n            results: [],\r\n            commentSong: \"\",\r\n            commentDescription: \"\",\r\n            isMakingNew: false,\r\n            commentToPost: \"\",\r\n            badCommentSongMessage: \"\",\r\n            badCommentDescriptionMessage: \"\"\r\n          });\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  handleOnChange = e => {\r\n    this.setState({ commentSong: e.target.value, badCommentSongMessage: \"\" });\r\n    fetch(\r\n      `https://api.spotify.com/v1/search?q=${e.target.value}&type=track&market=US&limit=6`,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${this.props.token}`\r\n        }\r\n      }\r\n    )\r\n      .then(res => res.json())\r\n      .then(result => {\r\n        if (result.tracks) {\r\n          this.setState({\r\n            results: result.tracks.items\r\n          });\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({ results: [] });\r\n      });\r\n  };\r\n\r\n  handleTrackClick = id => {\r\n    const isTrack = element => element.id === id;\r\n    const selectedTrackIndex = this.state.results.findIndex(isTrack);\r\n    const selectedTrack = this.state.results[selectedTrackIndex];\r\n\r\n    this.setState({\r\n      results: [],\r\n      commentSong: id,\r\n      commentToPost: `${selectedTrack.name} by ${selectedTrack.artists[0].name}`,\r\n      commentToPostID: id,\r\n      badCommentSongMessage: \"\"\r\n    });\r\n  };\r\n\r\n  handleCreateNewComment = () => {\r\n    this.setState({ isMakingNew: true });\r\n  };\r\n\r\n  handleCancel = () => {\r\n    this.setState({\r\n      results: [],\r\n      commentSong: \"\",\r\n      commentDescription: \"\",\r\n      isMakingNew: false,\r\n      commentToPost: \"\",\r\n      commentToPostID: \"\",\r\n      badCommentSongMessage: \"\",\r\n      badCommentDescriptionMessage: \"\"\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.isMakingNew ? (\r\n          <form className=\"new-comment-form\" onSubmit={this.handleSubmit}>\r\n            <div className=\"form-group\">\r\n              <label className=\"form-text text-muted\" htmlFor=\"CommentSong\">\r\n                Enter Spotify Track ID{\" \"}\r\n                {this.state.commentToPost && (\r\n                  <span htmlFor=\"CommentSong\">\r\n                    ({this.state.commentToPost})\r\n                  </span>\r\n                )}\r\n              </label>\r\n              <input\r\n                onChange={this.handleOnChange}\r\n                value={this.state.commentSong}\r\n                className={\r\n                  this.state.badCommentSongMessage\r\n                    ? \"form-control is-invalid\"\r\n                    : \"form-control\"\r\n                }\r\n                type=\"text\"\r\n                name=\"CommentSong\"\r\n                id=\"CommentSong\"\r\n              />\r\n              <div className=\"invalid-feedback\">\r\n                {this.state.badCommentSongMessage}\r\n              </div>\r\n            </div>\r\n            <div>\r\n              {this.state.results.map(track => (\r\n                <Track\r\n                  key={track.id}\r\n                  trackClick={this.handleTrackClick}\r\n                  trackAlbumArtUrl={track.album.images[2].url}\r\n                  trackTitle={track.name}\r\n                  trackArtist={track.artists[0].name}\r\n                  trackAlbum={track.album.name}\r\n                  id={track.id}\r\n                />\r\n              ))}\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label\r\n                className=\"form-text text-muted\"\r\n                htmlFor=\"CommentDescription\"\r\n              >\r\n                Enter Description\r\n              </label>\r\n              <input\r\n                onChange={e =>\r\n                  this.setState({\r\n                    commentDescription: e.target.value,\r\n                    badCommentDescriptionMessage: \"\"\r\n                  })\r\n                }\r\n                value={this.state.commentDescription}\r\n                className={\r\n                  this.state.badCommentDescriptionMessage\r\n                    ? \"form-control is-invalid\"\r\n                    : \"form-control\"\r\n                }\r\n                type=\"text\"\r\n                name=\"CommentDescription\"\r\n                id=\"CommentDescription\"\r\n              />\r\n              <div className=\"invalid-feedback\">\r\n                {this.state.badCommentDescriptionMessage}\r\n              </div>\r\n            </div>\r\n            <div className=\"commentOrCancel\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-primary\"\r\n                onClick={this.handleCancel}\r\n              >\r\n                Cancel\r\n              </button>\r\n              <input\r\n                className=\"btn btn-primary\"\r\n                type=\"submit\"\r\n                value=\"Comment\"\r\n              />\r\n            </div>\r\n          </form>\r\n        ) : (\r\n          <button\r\n            onClick={this.handleCreateNewComment}\r\n            className=\"btn btn-primary\"\r\n          >\r\n            Make A Comment\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewComment;\r\n"]},"metadata":{},"sourceType":"module"}