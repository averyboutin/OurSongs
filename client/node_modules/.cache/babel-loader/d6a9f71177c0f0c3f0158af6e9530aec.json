{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar base_1 = require(\"./base\");\n\nvar Url = __importStar(require(\"url\"));\n\nfunction isRelativeUrl(url) {\n  var u = Url.parse(url);\n  return u.protocol === null && u.host === null && u.port === null;\n}\n\nfunction isSameOrigin(a, b) {\n  var ua = Url.parse(a);\n  var ub = Url.parse(b); // https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\n\n  return ua.protocol === ub.protocol && ua.hostname === ub.hostname && ua.port === ub.port;\n}\n\nvar BrowserImage =\n/** @class */\nfunction (_super) {\n  __extends(BrowserImage, _super);\n\n  function BrowserImage() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  BrowserImage.prototype._initCanvas = function () {\n    var img = this.image;\n    var canvas = this._canvas = document.createElement('canvas');\n    var context = this._context = canvas.getContext('2d');\n    canvas.className = 'vibrant-canvas';\n    canvas.style.display = 'none';\n    this._width = canvas.width = img.width;\n    this._height = canvas.height = img.height;\n    context.drawImage(img, 0, 0);\n    document.body.appendChild(canvas);\n  };\n\n  BrowserImage.prototype.load = function (image) {\n    var _this = this;\n\n    var img = null;\n    var src = null;\n\n    if (typeof image === 'string') {\n      img = document.createElement('img');\n\n      if (!isRelativeUrl(image) && !isSameOrigin(window.location.href, image)) {\n        img.crossOrigin = 'anonymous';\n      }\n\n      src = img.src = image;\n    } else if (image instanceof HTMLImageElement) {\n      img = image;\n      src = image.src;\n    } else {\n      return Promise.reject(new Error(\"Cannot load buffer as an image in browser\"));\n    }\n\n    this.image = img;\n    return new Promise(function (resolve, reject) {\n      var onImageLoad = function () {\n        _this._initCanvas();\n\n        resolve(_this);\n      };\n\n      if (img.complete) {\n        // Already loaded\n        onImageLoad();\n      } else {\n        img.onload = onImageLoad;\n\n        img.onerror = function (e) {\n          return reject(new Error(\"Fail to load image: \" + src));\n        };\n      }\n    });\n  };\n\n  BrowserImage.prototype.clear = function () {\n    this._context.clearRect(0, 0, this._width, this._height);\n  };\n\n  BrowserImage.prototype.update = function (imageData) {\n    this._context.putImageData(imageData, 0, 0);\n  };\n\n  BrowserImage.prototype.getWidth = function () {\n    return this._width;\n  };\n\n  BrowserImage.prototype.getHeight = function () {\n    return this._height;\n  };\n\n  BrowserImage.prototype.resize = function (targetWidth, targetHeight, ratio) {\n    var _a = this,\n        canvas = _a._canvas,\n        context = _a._context,\n        img = _a.image;\n\n    this._width = canvas.width = targetWidth;\n    this._height = canvas.height = targetHeight;\n    context.scale(ratio, ratio);\n    context.drawImage(img, 0, 0);\n  };\n\n  BrowserImage.prototype.getPixelCount = function () {\n    return this._width * this._height;\n  };\n\n  BrowserImage.prototype.getImageData = function () {\n    return this._context.getImageData(0, 0, this._width, this._height);\n  };\n\n  BrowserImage.prototype.remove = function () {\n    if (this._canvas && this._canvas.parentNode) {\n      this._canvas.parentNode.removeChild(this._canvas);\n    }\n  };\n\n  return BrowserImage;\n}(base_1.ImageBase);\n\nexports.default = BrowserImage;","map":null,"metadata":{},"sourceType":"script"}