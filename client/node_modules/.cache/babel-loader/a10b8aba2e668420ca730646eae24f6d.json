{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"../util\");\n\nvar VBox =\n/** @class */\nfunction () {\n  function VBox(r1, r2, g1, g2, b1, b2, hist) {\n    this._volume = -1;\n    this._count = -1;\n    this.dimension = {\n      r1: r1,\n      r2: r2,\n      g1: g1,\n      g2: g2,\n      b1: b1,\n      b2: b2\n    };\n    this.hist = hist;\n  }\n\n  VBox.build = function (pixels, shouldIgnore) {\n    var hn = 1 << 3 * util_1.SIGBITS;\n    var hist = new Uint32Array(hn);\n    var rmax;\n    var rmin;\n    var gmax;\n    var gmin;\n    var bmax;\n    var bmin;\n    var r;\n    var g;\n    var b;\n    var a;\n    rmax = gmax = bmax = 0;\n    rmin = gmin = bmin = Number.MAX_VALUE;\n    var n = pixels.length / 4;\n    var i = 0;\n\n    while (i < n) {\n      var offset = i * 4;\n      i++;\n      r = pixels[offset + 0];\n      g = pixels[offset + 1];\n      b = pixels[offset + 2];\n      a = pixels[offset + 3]; // Ignored pixels' alpha is marked as 0 in filtering stage\n\n      if (a === 0) continue;\n      r = r >> util_1.RSHIFT;\n      g = g >> util_1.RSHIFT;\n      b = b >> util_1.RSHIFT;\n      var index = util_1.getColorIndex(r, g, b);\n      hist[index] += 1;\n      if (r > rmax) rmax = r;\n      if (r < rmin) rmin = r;\n      if (g > gmax) gmax = g;\n      if (g < gmin) gmin = g;\n      if (b > bmax) bmax = b;\n      if (b < bmin) bmin = b;\n    }\n\n    return new VBox(rmin, rmax, gmin, gmax, bmin, bmax, hist);\n  };\n\n  VBox.prototype.invalidate = function () {\n    this._volume = this._count = -1;\n    this._avg = null;\n  };\n\n  VBox.prototype.volume = function () {\n    if (this._volume < 0) {\n      var _a = this.dimension,\n          r1 = _a.r1,\n          r2 = _a.r2,\n          g1 = _a.g1,\n          g2 = _a.g2,\n          b1 = _a.b1,\n          b2 = _a.b2;\n      this._volume = (r2 - r1 + 1) * (g2 - g1 + 1) * (b2 - b1 + 1);\n    }\n\n    return this._volume;\n  };\n\n  VBox.prototype.count = function () {\n    if (this._count < 0) {\n      var hist = this.hist;\n      var _a = this.dimension,\n          r1 = _a.r1,\n          r2 = _a.r2,\n          g1 = _a.g1,\n          g2 = _a.g2,\n          b1 = _a.b1,\n          b2 = _a.b2;\n      var c = 0;\n\n      for (var r = r1; r <= r2; r++) {\n        for (var g = g1; g <= g2; g++) {\n          for (var b = b1; b <= b2; b++) {\n            var index = util_1.getColorIndex(r, g, b);\n            c += hist[index];\n          }\n        }\n      }\n\n      this._count = c;\n    }\n\n    return this._count;\n  };\n\n  VBox.prototype.clone = function () {\n    var hist = this.hist;\n    var _a = this.dimension,\n        r1 = _a.r1,\n        r2 = _a.r2,\n        g1 = _a.g1,\n        g2 = _a.g2,\n        b1 = _a.b1,\n        b2 = _a.b2;\n    return new VBox(r1, r2, g1, g2, b1, b2, hist);\n  };\n\n  VBox.prototype.avg = function () {\n    if (!this._avg) {\n      var hist = this.hist;\n      var _a = this.dimension,\n          r1 = _a.r1,\n          r2 = _a.r2,\n          g1 = _a.g1,\n          g2 = _a.g2,\n          b1 = _a.b1,\n          b2 = _a.b2;\n      var ntot = 0;\n      var mult = 1 << 8 - util_1.SIGBITS;\n      var rsum = void 0;\n      var gsum = void 0;\n      var bsum = void 0;\n      rsum = gsum = bsum = 0;\n\n      for (var r = r1; r <= r2; r++) {\n        for (var g = g1; g <= g2; g++) {\n          for (var b = b1; b <= b2; b++) {\n            var index = util_1.getColorIndex(r, g, b);\n            var h = hist[index];\n            ntot += h;\n            rsum += h * (r + 0.5) * mult;\n            gsum += h * (g + 0.5) * mult;\n            bsum += h * (b + 0.5) * mult;\n          }\n        }\n      }\n\n      if (ntot) {\n        this._avg = [~~(rsum / ntot), ~~(gsum / ntot), ~~(bsum / ntot)];\n      } else {\n        this._avg = [~~(mult * (r1 + r2 + 1) / 2), ~~(mult * (g1 + g2 + 1) / 2), ~~(mult * (b1 + b2 + 1) / 2)];\n      }\n    }\n\n    return this._avg;\n  };\n\n  VBox.prototype.contains = function (rgb) {\n    var r = rgb[0],\n        g = rgb[1],\n        b = rgb[2];\n    var _a = this.dimension,\n        r1 = _a.r1,\n        r2 = _a.r2,\n        g1 = _a.g1,\n        g2 = _a.g2,\n        b1 = _a.b1,\n        b2 = _a.b2;\n    r >>= util_1.RSHIFT;\n    g >>= util_1.RSHIFT;\n    b >>= util_1.RSHIFT;\n    return r >= r1 && r <= r2 && g >= g1 && g <= g2 && b >= b1 && b <= b2;\n  };\n\n  VBox.prototype.split = function () {\n    var hist = this.hist;\n    var _a = this.dimension,\n        r1 = _a.r1,\n        r2 = _a.r2,\n        g1 = _a.g1,\n        g2 = _a.g2,\n        b1 = _a.b1,\n        b2 = _a.b2;\n    var count = this.count();\n    if (!count) return [];\n    if (count === 1) return [this.clone()];\n    var rw = r2 - r1 + 1;\n    var gw = g2 - g1 + 1;\n    var bw = b2 - b1 + 1;\n    var maxw = Math.max(rw, gw, bw);\n    var accSum = null;\n    var sum;\n    var total;\n    sum = total = 0;\n    var maxd = null;\n\n    if (maxw === rw) {\n      maxd = 'r';\n      accSum = new Uint32Array(r2 + 1);\n\n      for (var r = r1; r <= r2; r++) {\n        sum = 0;\n\n        for (var g = g1; g <= g2; g++) {\n          for (var b = b1; b <= b2; b++) {\n            var index = util_1.getColorIndex(r, g, b);\n            sum += hist[index];\n          }\n        }\n\n        total += sum;\n        accSum[r] = total;\n      }\n    } else if (maxw === gw) {\n      maxd = 'g';\n      accSum = new Uint32Array(g2 + 1);\n\n      for (var g = g1; g <= g2; g++) {\n        sum = 0;\n\n        for (var r = r1; r <= r2; r++) {\n          for (var b = b1; b <= b2; b++) {\n            var index = util_1.getColorIndex(r, g, b);\n            sum += hist[index];\n          }\n        }\n\n        total += sum;\n        accSum[g] = total;\n      }\n    } else {\n      maxd = 'b';\n      accSum = new Uint32Array(b2 + 1);\n\n      for (var b = b1; b <= b2; b++) {\n        sum = 0;\n\n        for (var r = r1; r <= r2; r++) {\n          for (var g = g1; g <= g2; g++) {\n            var index = util_1.getColorIndex(r, g, b);\n            sum += hist[index];\n          }\n        }\n\n        total += sum;\n        accSum[b] = total;\n      }\n    }\n\n    var splitPoint = -1;\n    var reverseSum = new Uint32Array(accSum.length);\n\n    for (var i = 0; i < accSum.length; i++) {\n      var d = accSum[i];\n      if (splitPoint < 0 && d > total / 2) splitPoint = i;\n      reverseSum[i] = total - d;\n    }\n\n    var vbox = this;\n\n    function doCut(d) {\n      var dim1 = d + '1';\n      var dim2 = d + '2';\n      var d1 = vbox.dimension[dim1];\n      var d2 = vbox.dimension[dim2];\n      var vbox1 = vbox.clone();\n      var vbox2 = vbox.clone();\n      var left = splitPoint - d1;\n      var right = d2 - splitPoint;\n\n      if (left <= right) {\n        d2 = Math.min(d2 - 1, ~~(splitPoint + right / 2));\n        d2 = Math.max(0, d2);\n      } else {\n        d2 = Math.max(d1, ~~(splitPoint - 1 - left / 2));\n        d2 = Math.min(vbox.dimension[dim2], d2);\n      }\n\n      while (!accSum[d2]) d2++;\n\n      var c2 = reverseSum[d2];\n\n      while (!c2 && accSum[d2 - 1]) c2 = reverseSum[--d2];\n\n      vbox1.dimension[dim2] = d2;\n      vbox2.dimension[dim1] = d2 + 1;\n      return [vbox1, vbox2];\n    }\n\n    return doCut(maxd);\n  };\n\n  return VBox;\n}();\n\nexports.default = VBox;","map":null,"metadata":{},"sourceType":"script"}