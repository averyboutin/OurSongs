{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Xavier\\\\Documents\\\\School\\\\Fall 2019\\\\Distributed Web Systems Design\\\\OurSongs\\\\client\\\\src\\\\components\\\\comments\\\\comments.jsx\";\nimport React, { Component } from \"react\";\nimport Comment from \"./comment\";\nimport NewComment from \"./newComment\";\nimport \"./comments.scss\";\n\nclass Comments extends Component {\n  constructor() {\n    super();\n\n    this.updateIsInPlaylist = (CommentID, value) => {\n      fetch(\"/api/comments\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          CommentID: CommentID,\n          value: value\n        })\n      }).then(() => {\n        console.log(\"comment updated\");\n        this.refreshComments();\n      });\n    };\n\n    this.addTrackToPlaylist = (CommentID, track) => {\n      fetch(\"https://api.spotify.com/v1/playlists/\".concat(this.props.Playlist, \"/tracks\"), {\n        method: \"POST\",\n        headers: {\n          Authorization: \"Bearer \".concat(this.props.token),\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          uris: [\"spotify:track:\".concat(track)]\n        })\n      }).then(() => this.updateIsInPlaylist(CommentID, true)).catch(e => {\n        console.log(e);\n      });\n    };\n\n    this.removeTrackFromPlaylist = (CommentID, track) => {\n      fetch(\"https://api.spotify.com/v1/playlists/\".concat(this.props.Playlist, \"/tracks\"), {\n        method: \"DELETE\",\n        headers: {\n          Authorization: \"Bearer \".concat(this.props.token),\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          tracks: [{\n            uri: \"spotify:track:\".concat(track)\n          }]\n        })\n      }).then(() => this.updateIsInPlaylist(CommentID, false)).catch(e => {\n        console.log(e);\n      });\n    };\n\n    this.addAllTracksToPlaylist = () => {\n      this.state.comments.forEach(comment => {\n        if (!comment.IsInPlaylist) {\n          this.addTrackToPlaylist(comment.CommentID, comment.CommentSong);\n        }\n      });\n    };\n\n    this.refreshComments = () => {\n      fetch(\"/api/comments/\".concat(this.props.PostID)).then(res => res.json()).then(comments => this.setState({\n        comments\n      }, () => console.log(\"comments fetched\", comments)));\n    };\n\n    this.state = {\n      comments: []\n    };\n  }\n\n  componentDidMount() {\n    this.refreshComments();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"comments-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"comments-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Comments\"), this.props.currentUserName === this.props.UserName && this.props.isLoggedInWithSpotify && this.props.Playlist && React.createElement(\"button\", {\n      className: \"btn btn-secondary btn-spotify\",\n      onClick: this.addAllTracksToPlaylist,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Add All Tracks To Playlist\")), this.props.isLoggedIn && React.createElement(NewComment, {\n      PostID: this.props.PostID,\n      refresh: this.refreshComments,\n      token: this.props.token,\n      currentUserName: this.props.currentUserName,\n      Playlist: this.props.Playlist,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"comments-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, this.state.comments.map(comment => React.createElement(Comment, {\n      key: comment.CommentID,\n      CommentID: comment.CommentID,\n      description: comment.CommentDescription,\n      song: comment.CommentSong,\n      CommentDate: comment.CommentDate,\n      UserName: comment.UserName,\n      currentUserName: this.props.currentUserName,\n      postUserName: this.props.UserName,\n      isLoggedInWithSpotify: this.props.isLoggedInWithSpotify,\n      IsInPlaylist: comment.IsInPlaylist,\n      Playlist: this.props.Playlist,\n      token: this.props.token,\n      refresh: this.refreshComments,\n      removeTrackFromPlaylist: this.removeTrackFromPlaylist,\n      addTrackToPlaylist: this.addTrackToPlaylist,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Comments;","map":{"version":3,"sources":["C:/Users/Xavier/Documents/School/Fall 2019/Distributed Web Systems Design/OurSongs/client/src/components/comments/comments.jsx"],"names":["React","Component","Comment","NewComment","Comments","constructor","updateIsInPlaylist","CommentID","value","fetch","method","headers","body","JSON","stringify","then","console","log","refreshComments","addTrackToPlaylist","track","props","Playlist","Authorization","token","uris","catch","e","removeTrackFromPlaylist","tracks","uri","addAllTracksToPlaylist","state","comments","forEach","comment","IsInPlaylist","CommentSong","PostID","res","json","setState","componentDidMount","render","currentUserName","UserName","isLoggedInWithSpotify","isLoggedIn","map","CommentDescription","CommentDate"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Comment from \"./comment\";\r\nimport NewComment from \"./newComment\";\r\nimport \"./comments.scss\";\r\n\r\nclass Comments extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      comments: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshComments();\r\n  }\r\n\r\n  updateIsInPlaylist = (CommentID, value) => {\r\n    fetch(\"/api/comments\", {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        CommentID: CommentID,\r\n        value: value\r\n      })\r\n    }).then(() => {\r\n      console.log(\"comment updated\");\r\n      this.refreshComments();\r\n    });\r\n  };\r\n\r\n  addTrackToPlaylist = (CommentID, track) => {\r\n    fetch(\r\n      `https://api.spotify.com/v1/playlists/${this.props.Playlist}/tracks`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${this.props.token}`,\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          uris: [`spotify:track:${track}`]\r\n        })\r\n      }\r\n    )\r\n      .then(() => this.updateIsInPlaylist(CommentID, true))\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  removeTrackFromPlaylist = (CommentID, track) => {\r\n    fetch(\r\n      `https://api.spotify.com/v1/playlists/${this.props.Playlist}/tracks`,\r\n      {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          Authorization: `Bearer ${this.props.token}`,\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          tracks: [{ uri: `spotify:track:${track}` }]\r\n        })\r\n      }\r\n    )\r\n      .then(() => this.updateIsInPlaylist(CommentID, false))\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  addAllTracksToPlaylist = () => {\r\n    this.state.comments.forEach(comment => {\r\n      if (!comment.IsInPlaylist) {\r\n        this.addTrackToPlaylist(comment.CommentID, comment.CommentSong);\r\n      }\r\n    });\r\n  };\r\n\r\n  refreshComments = () => {\r\n    fetch(`/api/comments/${this.props.PostID}`)\r\n      .then(res => res.json())\r\n      .then(comments =>\r\n        this.setState({ comments }, () =>\r\n          console.log(`comments fetched`, comments)\r\n        )\r\n      );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"comments-section\">\r\n        <div className=\"comments-header\">\r\n          <h1>Comments</h1>\r\n          {this.props.currentUserName === this.props.UserName &&\r\n            this.props.isLoggedInWithSpotify &&\r\n            this.props.Playlist && (\r\n              <button\r\n                className=\"btn btn-secondary btn-spotify\"\r\n                onClick={this.addAllTracksToPlaylist}\r\n              >\r\n                Add All Tracks To Playlist\r\n              </button>\r\n            )}\r\n        </div>\r\n        {this.props.isLoggedIn && (\r\n          <NewComment\r\n            PostID={this.props.PostID}\r\n            refresh={this.refreshComments}\r\n            token={this.props.token}\r\n            currentUserName={this.props.currentUserName}\r\n            Playlist={this.props.Playlist}\r\n          />\r\n        )}\r\n\r\n        <div className=\"comments-container\">\r\n          {this.state.comments.map(comment => (\r\n            <Comment\r\n              key={comment.CommentID}\r\n              CommentID={comment.CommentID}\r\n              description={comment.CommentDescription}\r\n              song={comment.CommentSong}\r\n              CommentDate={comment.CommentDate}\r\n              UserName={comment.UserName}\r\n              currentUserName={this.props.currentUserName}\r\n              postUserName={this.props.UserName}\r\n              isLoggedInWithSpotify={this.props.isLoggedInWithSpotify}\r\n              IsInPlaylist={comment.IsInPlaylist}\r\n              Playlist={this.props.Playlist}\r\n              token={this.props.token}\r\n              refresh={this.refreshComments}\r\n              removeTrackFromPlaylist={this.removeTrackFromPlaylist}\r\n              addTrackToPlaylist={this.addTrackToPlaylist}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Comments;\r\n"]},"metadata":{},"sourceType":"module"}