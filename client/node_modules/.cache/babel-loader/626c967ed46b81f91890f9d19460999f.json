{"ast":null,"code":"var _jsxFileName = \"/Users/averyboutin/Repos/OurSongs/client/src/components/posts/newPost.jsx\";\nimport React, { Component } from \"react\";\nimport Track from \"./track\";\nimport \"./newPost.scss\";\n\nclass NewPost extends Component {\n  constructor() {\n    super();\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n\n      if (this.state.songToPost === \"\" && this.state.postDescription === \"\") {\n        this.setState({\n          badPostSongMessage: \"Please select a song\",\n          badPostDescriptionMessage: \"Posts must have a description\"\n        });\n      } else if (this.state.songToPost === \"\") {\n        this.setState({\n          badPostSongMessage: \"Please select a song\"\n        });\n      } else if (this.state.postDescription === \"\") {\n        this.setState({\n          badPostDescriptionMessage: \"Posts must have a description\"\n        });\n      } else {\n        if (this.state.makeSpotifyPlaylist && this.props.isLoggedInWithSpotify) {\n          fetch(\"https://api.spotify.com/v1/users/\".concat(this.props.spotifyUserID, \"/playlists\"), {\n            method: \"POST\",\n            headers: {\n              Authorization: \"Bearer \".concat(this.props.token),\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              name: this.state.postDescription,\n              public: true\n            })\n          }).then(res => res.json()).then(response => {\n            this.setState({\n              playlistID: response.id\n            });\n            return response.id;\n          }).then(id => {\n            fetch(\"https://api.spotify.com/v1/playlists/\".concat(id, \"/tracks\"), {\n              method: \"POST\",\n              headers: {\n                Authorization: \"Bearer \".concat(this.props.token),\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                uris: [\"spotify:track:\".concat(this.state.songToPostID)]\n              })\n            });\n          }).then(() => {\n            this.makePost();\n          });\n        } else this.makePost();\n      }\n    };\n\n    this.makePost = callback => {\n      fetch(\"/api/posts\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          PostDescription: this.state.postDescription,\n          //using songToPostID in case user edits id after clicking on track\n          PostSong: this.state.songToPostID,\n          PostDate: new Date().toISOString().slice(0, 19).replace(\"T\", \" \"),\n          UserName: this.props.currentUserName,\n          Playlist: this.state.playlistID\n        })\n      }).then(() => {\n        this.props.refresh();\n        this.setState({\n          results: [],\n          postSong: \"\",\n          postDescription: \"\",\n          makeSpotifyPlaylist: false,\n          playlistID: \"\",\n          isMakingNew: false,\n          songToPost: \"\",\n          songToPostID: \"\",\n          badPostSongMessage: \"\",\n          badPostDescriptionMessage: \"\"\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.handleOnChange = e => {\n      this.setState({\n        postSong: e.target.value,\n        badPostSongMessage: \"\"\n      });\n      fetch(\"https://api.spotify.com/v1/search?q=\".concat(e.target.value, \"&type=track&market=US&limit=6\"), {\n        headers: {\n          Authorization: \"Bearer \".concat(this.props.token)\n        }\n      }).then(res => res.json()).then(result => {\n        if (result.tracks) {\n          this.setState({\n            results: result.tracks.items\n          });\n        }\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          results: []\n        });\n      });\n    };\n\n    this.handleTrackClick = id => {\n      const isTrack = element => element.id === id;\n\n      const selectedTrackIndex = this.state.results.findIndex(isTrack);\n      const selectedTrack = this.state.results[selectedTrackIndex];\n      this.setState({\n        results: [],\n        postSong: id,\n        songToPost: \"\".concat(selectedTrack.name, \" by \").concat(selectedTrack.artists[0].name),\n        songToPostID: id,\n        badPostSongMessage: \"\"\n      });\n    };\n\n    this.handleCreateNewPost = () => {\n      this.setState({\n        isMakingNew: true\n      });\n    };\n\n    this.handleCancel = () => {\n      this.setState({\n        results: [],\n        postSong: \"\",\n        postDescription: \"\",\n        makeSpotifyPlaylist: false,\n        playlistID: \"\",\n        isMakingNew: false,\n        songToPost: \"\",\n        songToPostID: \"\",\n        badPostSongMessage: \"\",\n        badPostDescriptionMessage: \"\"\n      });\n    };\n\n    this.state = {\n      results: [],\n      postSong: \"\",\n      postDescription: \"\",\n      makeSpotifyPlaylist: false,\n      playlistID: \"\",\n      isMakingNew: false,\n      songToPost: \"\",\n      songToPostID: \"\",\n      badPostSongMessage: \"\",\n      badPostDescriptionMessage: \"\"\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, this.state.isMakingNew ? React.createElement(\"form\", {\n      className: \"new-post-form\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"form-text text-muted\",\n      htmlFor: \"PostSong\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Enter Spotify Track ID\", \" \", this.state.songToPost && React.createElement(\"span\", {\n      htmlFor: \"PostSong\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"(\", this.state.songToPost, \")\")), React.createElement(\"input\", {\n      onChange: this.handleOnChange,\n      value: this.state.postSong,\n      className: this.state.badPostSongMessage ? \"form-control is-invalid\" : \"form-control\",\n      type: \"text\",\n      name: \"PostSong\",\n      id: \"PostSong\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, this.state.badPostSongMessage)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, this.state.results.map(track => React.createElement(Track, {\n      key: track.id,\n      trackClick: this.handleTrackClick,\n      trackAlbumArtUrl: track.album.images[2].url,\n      trackTitle: track.name,\n      trackArtist: track.artists[0].name,\n      trackAlbum: track.album.name,\n      id: track.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"form-text text-muted\",\n      htmlFor: \"PostDescription\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, \"Enter Description\"), React.createElement(\"input\", {\n      onChange: e => this.setState({\n        postDescription: e.target.value,\n        badPostDescriptionMessage: \"\"\n      }),\n      value: this.state.postDescription,\n      className: this.state.badPostDescriptionMessage ? \"form-control is-invalid\" : \"form-control\",\n      type: \"text\",\n      name: \"PostDescription\",\n      id: \"PostDescription\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, this.state.badPostDescriptionMessage)), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"custom-control custom-checkbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      className: \"custom-control-input\",\n      id: \"makeSpotifyPlaylist\",\n      defaultChecked: this.state.makeSpotifyPlaylist,\n      onChange: e => {\n        this.setState({\n          makeSpotifyPlaylist: !this.state.makeSpotifyPlaylist\n        });\n      },\n      disabled: this.props.isLoggedInWithSpotify ? \"\" : \"disabled\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"custom-control-label\",\n      htmlFor: \"makeSpotifyPlaylist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"Make this post a Spotify playlist\"))), React.createElement(\"div\", {\n      className: \"postOrCancel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: this.handleCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(\"input\", {\n      className: \"btn btn-primary\",\n      type: \"submit\",\n      value: \"Post\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }))) : React.createElement(\"button\", {\n      onClick: this.handleCreateNewPost,\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"Create New Post\"));\n  }\n\n}\n\nexport default NewPost;","map":{"version":3,"sources":["/Users/averyboutin/Repos/OurSongs/client/src/components/posts/newPost.jsx"],"names":["React","Component","Track","NewPost","constructor","handleSubmit","e","preventDefault","state","songToPost","postDescription","setState","badPostSongMessage","badPostDescriptionMessage","makeSpotifyPlaylist","props","isLoggedInWithSpotify","fetch","spotifyUserID","method","headers","Authorization","token","body","JSON","stringify","name","public","then","res","json","response","playlistID","id","uris","songToPostID","makePost","callback","PostDescription","PostSong","PostDate","Date","toISOString","slice","replace","UserName","currentUserName","Playlist","refresh","results","postSong","isMakingNew","catch","err","console","log","handleOnChange","target","value","result","tracks","items","handleTrackClick","isTrack","element","selectedTrackIndex","findIndex","selectedTrack","artists","handleCreateNewPost","handleCancel","render","map","track","album","images","url"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Track from \"./track\";\r\nimport \"./newPost.scss\";\r\n\r\nclass NewPost extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      results: [],\r\n      postSong: \"\",\r\n      postDescription: \"\",\r\n      makeSpotifyPlaylist: false,\r\n      playlistID: \"\",\r\n      isMakingNew: false,\r\n      songToPost: \"\",\r\n      songToPostID: \"\",\r\n      badPostSongMessage: \"\",\r\n      badPostDescriptionMessage: \"\"\r\n    };\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (this.state.songToPost === \"\" && this.state.postDescription === \"\") {\r\n      this.setState({\r\n        badPostSongMessage: \"Please select a song\",\r\n        badPostDescriptionMessage: \"Posts must have a description\"\r\n      });\r\n    } else if (this.state.songToPost === \"\") {\r\n      this.setState({\r\n        badPostSongMessage: \"Please select a song\"\r\n      });\r\n    } else if (this.state.postDescription === \"\") {\r\n      this.setState({\r\n        badPostDescriptionMessage: \"Posts must have a description\"\r\n      });\r\n    } else {\r\n      if (this.state.makeSpotifyPlaylist && this.props.isLoggedInWithSpotify) {\r\n        fetch(\r\n          `https://api.spotify.com/v1/users/${this.props.spotifyUserID}/playlists`,\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              Authorization: `Bearer ${this.props.token}`,\r\n              \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n              name: this.state.postDescription,\r\n              public: true\r\n            })\r\n          }\r\n        )\r\n          .then(res => res.json())\r\n          .then(response => {\r\n            this.setState({ playlistID: response.id });\r\n            return response.id;\r\n          })\r\n          .then(id => {\r\n            fetch(`https://api.spotify.com/v1/playlists/${id}/tracks`, {\r\n              method: \"POST\",\r\n              headers: {\r\n                Authorization: `Bearer ${this.props.token}`,\r\n                \"Content-Type\": \"application/json\"\r\n              },\r\n              body: JSON.stringify({\r\n                uris: [`spotify:track:${this.state.songToPostID}`]\r\n              })\r\n            });\r\n          })\r\n          .then(() => {\r\n            this.makePost();\r\n          });\r\n      } else this.makePost();\r\n    }\r\n  };\r\n\r\n  makePost = callback => {\r\n    fetch(\"/api/posts\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        PostDescription: this.state.postDescription,\r\n        //using songToPostID in case user edits id after clicking on track\r\n        PostSong: this.state.songToPostID,\r\n        PostDate: new Date()\r\n          .toISOString()\r\n          .slice(0, 19)\r\n          .replace(\"T\", \" \"),\r\n        UserName: this.props.currentUserName,\r\n        Playlist: this.state.playlistID\r\n      })\r\n    })\r\n      .then(() => {\r\n        this.props.refresh();\r\n        this.setState({\r\n          results: [],\r\n          postSong: \"\",\r\n          postDescription: \"\",\r\n          makeSpotifyPlaylist: false,\r\n          playlistID: \"\",\r\n          isMakingNew: false,\r\n          songToPost: \"\",\r\n          songToPostID: \"\",\r\n          badPostSongMessage: \"\",\r\n          badPostDescriptionMessage: \"\"\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  handleOnChange = e => {\r\n    this.setState({ postSong: e.target.value, badPostSongMessage: \"\" });\r\n    fetch(\r\n      `https://api.spotify.com/v1/search?q=${e.target.value}&type=track&market=US&limit=6`,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${this.props.token}`\r\n        }\r\n      }\r\n    )\r\n      .then(res => res.json())\r\n      .then(result => {\r\n        if (result.tracks) {\r\n          this.setState({\r\n            results: result.tracks.items\r\n          });\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({ results: [] });\r\n      });\r\n  };\r\n\r\n  handleTrackClick = id => {\r\n    const isTrack = element => element.id === id;\r\n    const selectedTrackIndex = this.state.results.findIndex(isTrack);\r\n    const selectedTrack = this.state.results[selectedTrackIndex];\r\n\r\n    this.setState({\r\n      results: [],\r\n      postSong: id,\r\n      songToPost: `${selectedTrack.name} by ${selectedTrack.artists[0].name}`,\r\n      songToPostID: id,\r\n      badPostSongMessage: \"\"\r\n    });\r\n  };\r\n\r\n  handleCreateNewPost = () => {\r\n    this.setState({ isMakingNew: true });\r\n  };\r\n\r\n  handleCancel = () => {\r\n    this.setState({\r\n      results: [],\r\n      postSong: \"\",\r\n      postDescription: \"\",\r\n      makeSpotifyPlaylist: false,\r\n      playlistID: \"\",\r\n      isMakingNew: false,\r\n      songToPost: \"\",\r\n      songToPostID: \"\",\r\n      badPostSongMessage: \"\",\r\n      badPostDescriptionMessage: \"\"\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.isMakingNew ? (\r\n          <form className=\"new-post-form\" onSubmit={this.handleSubmit}>\r\n            <div className=\"form-group\">\r\n              <label className=\"form-text text-muted\" htmlFor=\"PostSong\">\r\n                Enter Spotify Track ID{\" \"}\r\n                {this.state.songToPost && (\r\n                  <span htmlFor=\"PostSong\">({this.state.songToPost})</span>\r\n                )}\r\n              </label>\r\n              <input\r\n                onChange={this.handleOnChange}\r\n                value={this.state.postSong}\r\n                className={\r\n                  this.state.badPostSongMessage\r\n                    ? \"form-control is-invalid\"\r\n                    : \"form-control\"\r\n                }\r\n                type=\"text\"\r\n                name=\"PostSong\"\r\n                id=\"PostSong\"\r\n              />\r\n              <div className=\"invalid-feedback\">\r\n                {this.state.badPostSongMessage}\r\n              </div>\r\n            </div>\r\n            <div>\r\n              {this.state.results.map(track => (\r\n                <Track\r\n                  key={track.id}\r\n                  trackClick={this.handleTrackClick}\r\n                  trackAlbumArtUrl={track.album.images[2].url}\r\n                  trackTitle={track.name}\r\n                  trackArtist={track.artists[0].name}\r\n                  trackAlbum={track.album.name}\r\n                  id={track.id}\r\n                />\r\n              ))}\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"form-text text-muted\" htmlFor=\"PostDescription\">\r\n                Enter Description\r\n              </label>\r\n              <input\r\n                onChange={e =>\r\n                  this.setState({\r\n                    postDescription: e.target.value,\r\n                    badPostDescriptionMessage: \"\"\r\n                  })\r\n                }\r\n                value={this.state.postDescription}\r\n                className={\r\n                  this.state.badPostDescriptionMessage\r\n                    ? \"form-control is-invalid\"\r\n                    : \"form-control\"\r\n                }\r\n                type=\"text\"\r\n                name=\"PostDescription\"\r\n                id=\"PostDescription\"\r\n              />\r\n              <div className=\"invalid-feedback\">\r\n                {this.state.badPostDescriptionMessage}\r\n              </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <div className=\"custom-control custom-checkbox\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"custom-control-input\"\r\n                  id=\"makeSpotifyPlaylist\"\r\n                  defaultChecked={this.state.makeSpotifyPlaylist}\r\n                  onChange={e => {\r\n                    this.setState({\r\n                      makeSpotifyPlaylist: !this.state.makeSpotifyPlaylist\r\n                    });\r\n                  }}\r\n                  disabled={this.props.isLoggedInWithSpotify ? \"\" : \"disabled\"}\r\n                />\r\n                <label\r\n                  className=\"custom-control-label\"\r\n                  htmlFor=\"makeSpotifyPlaylist\"\r\n                >\r\n                  Make this post a Spotify playlist\r\n                </label>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"postOrCancel\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-primary\"\r\n                onClick={this.handleCancel}\r\n              >\r\n                Cancel\r\n              </button>\r\n              <input className=\"btn btn-primary\" type=\"submit\" value=\"Post\" />\r\n            </div>\r\n          </form>\r\n        ) : (\r\n          <button\r\n            onClick={this.handleCreateNewPost}\r\n            className=\"btn btn-primary\"\r\n          >\r\n            Create New Post\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewPost;\r\n"]},"metadata":{},"sourceType":"module"}