{"ast":null,"code":"var _jsxFileName = \"/Users/averyboutin/Repos/OurSongs/client/src/components/posts/newPost.jsx\";\nimport React, { Component } from \"react\";\nimport Track from \"./track\";\nimport \"./newPost.scss\";\n\nclass NewPost extends Component {\n  constructor() {\n    super();\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.setState({\n        results: [],\n        postSong: \"\",\n        postDescription: \"\",\n        isMakingNew: false\n      });\n      fetch(\"/api/posts\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          PostDescription: e.target[1].value,\n          PostSong: e.target[0].value,\n          UserID: this.props.UserID\n        })\n      }).then(() => {\n        this.props.refresh();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.handleOnChange = e => {\n      this.setState({\n        postSong: e.target.value\n      });\n      fetch(\"https://api.spotify.com/v1/search?q=\".concat(e.target.value, \"&type=track&market=US&limit=6\"), {\n        headers: {\n          Authorization: \"Bearer \".concat(this.props.token)\n        }\n      }).then(res => res.json()).then(result => {\n        this.setState({\n          results: result.tracks.items\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          results: []\n        });\n      });\n    };\n\n    this.handleTrackClick = id => {\n      this.setState({\n        results: [],\n        postSong: id\n      });\n    };\n\n    this.handleCreateNewPost = () => {\n      this.setState({\n        isMakingNew: true\n      });\n    };\n\n    this.handleCancel = () => {\n      this.setState({\n        results: [],\n        postSong: \"\",\n        postDescription: \"\",\n        isMakingNew: false\n      });\n    };\n\n    this.state = {\n      results: [],\n      postSong: \"\",\n      postDescription: \"\",\n      isMakingNew: false\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, this.state.isMakingNew ? React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"form-text text-muted\",\n      htmlFor: \"PostSong\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Enter Spotify Track ID\"), React.createElement(\"input\", {\n      onChange: this.handleOnChange,\n      value: this.state.postSong,\n      className: \"form-control\",\n      type: \"text\",\n      name: \"PostSong\",\n      id: \"PostSong\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, this.state.results.map(track => React.createElement(Track, {\n      key: track.id,\n      trackClick: this.handleTrackClick,\n      trackAlbumArtUrl: track.album.images[2].url,\n      trackTitle: track.name,\n      trackArtist: track.artists[0].name,\n      trackAlbum: track.album.name,\n      id: track.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"form-text text-muted\",\n      htmlFor: \"PostDescription\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Enter Description\"), React.createElement(\"input\", {\n      onChange: e => this.setState({\n        postDescription: e.target.value\n      }),\n      value: this.state.postDescription,\n      className: \"form-control\",\n      type: \"text\",\n      name: \"PostDescription\",\n      id: \"PostDescription\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"postOrCancel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: this.handleCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(\"input\", {\n      className: \"btn btn-primary\",\n      type: \"submit\",\n      value: \"Post\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }))) : React.createElement(\"button\", {\n      onClick: this.handleCreateNewPost,\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Create New Post\"));\n  }\n\n}\n\nexport default NewPost;","map":{"version":3,"sources":["/Users/averyboutin/Repos/OurSongs/client/src/components/posts/newPost.jsx"],"names":["React","Component","Track","NewPost","constructor","handleSubmit","e","preventDefault","setState","results","postSong","postDescription","isMakingNew","fetch","method","headers","body","JSON","stringify","PostDescription","target","value","PostSong","UserID","props","then","refresh","catch","err","console","log","handleOnChange","Authorization","token","res","json","result","tracks","items","handleTrackClick","id","handleCreateNewPost","handleCancel","state","render","map","track","album","images","url","name","artists"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Track from \"./track\";\r\nimport \"./newPost.scss\";\r\n\r\nclass NewPost extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      results: [],\r\n      postSong: \"\",\r\n      postDescription: \"\",\r\n      isMakingNew: false\r\n    };\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      results: [],\r\n      postSong: \"\",\r\n      postDescription: \"\",\r\n      isMakingNew: false\r\n    });\r\n\r\n    fetch(\"/api/posts\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        PostDescription: e.target[1].value,\r\n        PostSong: e.target[0].value,\r\n        UserID: this.props.UserID\r\n      })\r\n    })\r\n      .then(() => {\r\n        this.props.refresh();\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  handleOnChange = e => {\r\n    this.setState({ postSong: e.target.value });\r\n    fetch(\r\n      `https://api.spotify.com/v1/search?q=${e.target.value}&type=track&market=US&limit=6`,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${this.props.token}`\r\n        }\r\n      }\r\n    )\r\n      .then(res => res.json())\r\n      .then(result => {\r\n        this.setState({\r\n          results: result.tracks.items\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({ results: [] });\r\n      });\r\n  };\r\n\r\n  handleTrackClick = id => {\r\n    this.setState({ results: [], postSong: id });\r\n  };\r\n\r\n  handleCreateNewPost = () => {\r\n    this.setState({ isMakingNew: true });\r\n  };\r\n\r\n  handleCancel = () => {\r\n    this.setState({\r\n      results: [],\r\n      postSong: \"\",\r\n      postDescription: \"\",\r\n      isMakingNew: false\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.isMakingNew ? (\r\n          <form onSubmit={this.handleSubmit}>\r\n            <div className=\"form-group\">\r\n              <label className=\"form-text text-muted\" htmlFor=\"PostSong\">\r\n                Enter Spotify Track ID\r\n              </label>\r\n              <input\r\n                onChange={this.handleOnChange}\r\n                value={this.state.postSong}\r\n                className=\"form-control\"\r\n                type=\"text\"\r\n                name=\"PostSong\"\r\n                id=\"PostSong\"\r\n              />\r\n            </div>\r\n            <div>\r\n              {this.state.results.map(track => (\r\n                <Track\r\n                  key={track.id}\r\n                  trackClick={this.handleTrackClick}\r\n                  trackAlbumArtUrl={track.album.images[2].url}\r\n                  trackTitle={track.name}\r\n                  trackArtist={track.artists[0].name}\r\n                  trackAlbum={track.album.name}\r\n                  id={track.id}\r\n                />\r\n              ))}\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"form-text text-muted\" htmlFor=\"PostDescription\">\r\n                Enter Description\r\n              </label>\r\n              <input\r\n                onChange={e =>\r\n                  this.setState({ postDescription: e.target.value })\r\n                }\r\n                value={this.state.postDescription}\r\n                className=\"form-control\"\r\n                type=\"text\"\r\n                name=\"PostDescription\"\r\n                id=\"PostDescription\"\r\n              />\r\n            </div>\r\n            <div className=\"postOrCancel\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-primary\"\r\n                onClick={this.handleCancel}\r\n              >\r\n                Cancel\r\n              </button>\r\n              <input className=\"btn btn-primary\" type=\"submit\" value=\"Post\" />\r\n            </div>\r\n          </form>\r\n        ) : (\r\n          <button\r\n            onClick={this.handleCreateNewPost}\r\n            className=\"btn btn-primary\"\r\n          >\r\n            Create New Post\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewPost;\r\n"]},"metadata":{},"sourceType":"module"}